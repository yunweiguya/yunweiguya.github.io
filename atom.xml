<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[明心见性]]></title>
  <link href="http://yunweiguya.github.io/atom.xml" rel="self"/>
  <link href="http://yunweiguya.github.io/"/>
  <updated>2014-10-08T22:40:12+08:00</updated>
  <id>http://yunweiguya.github.io/</id>
  <author>
    <name><![CDATA[云谷]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenCart源码浅析2014-10-08]]></title>
    <link href="http://yunweiguya.github.io/blog/2014/10/08/opencartyuan-ma-qian-xi-2014-10-08/"/>
    <updated>2014-10-08T22:38:55+08:00</updated>
    <id>http://yunweiguya.github.io/blog/2014/10/08/opencartyuan-ma-qian-xi-2014-10-08</id>
    <content type="html"><![CDATA[<h1>更新log</h1>

<pre><code>1. 2014-10-08 index.php
</code></pre>

<h1>初衷</h1>

<pre><code>想看看社区迭代过的商城各模块是如何设计的，并给团队做分享。
</code></pre>

<h1>upload/index.php</h1>

<h5>upload/system/startup.php 主要做两件事情：</h5>

<pre><code>1. spl_autoload_register('autoload'); 来加载library/下的类。
2. 加载Engine(action、controller、event、front、loader、model、registry)和Helper。
</code></pre>

<h5>Engine</h5>

<pre><code>1. Registry 注册表模式，全局k-v数组。
2. Action 根据$route找到文件，通过call_user_func_array调用upload/catalog/controller/下相应controller的action。
3. Loader 手动加载model、view、library、helper。
4. Event 保留一堆Actions来trigger。
5. Front dispatch分发器。addPreAction添加前置处理。dispatch链式执行。
</code></pre>

<h5>Config 全局配置array</h5>

<pre><code>利用autoload加载library/config.php类，存setting表中k-v。
</code></pre>

<h5>其它</h5>

<pre><code>1. error_handler和超简单Log。
2. Request，递归参数过滤一堆php变量:$_GET $_POST $_REQUEST $_COOKIE $_FILES $_SERVER。
3. Response，HTTP头操作，《HTTP权威》要再细看。
4. Cache分为APC、File、Memcache 3种，文件实现简单干净。
5. language表匹配HTTP头语言。
6. tracking参数更新marketing表中clicks。
7. Encryption 加密工具类。
</code></pre>

<h5>Document</h5>

<h1>业务实体</h1>

<pre><code>全部db操作、表大量text字段应对较大流量值得商榷。
</code></pre>

<h5>Customer</h5>

<h5>Affiliate 联盟营销Affiliate Marketing</h5>

<h5>Cart 购物车*****</h5>

<h5>Tax</h5>

<h5>Product 商品 ******</h5>

<h5>Category 类目 ******</h5>

<h5>Coupon 促销 ******</h5>

<h5>Voucher 礼品劵 ***</h5>

<h5>Order 订单 ******</h5>

<h5>度量单位</h5>

<pre><code>1. Currency和currency表
2. Weight和 weight_class、weight_class_description表
3. Length
</code></pre>

<h3>TODO</h3>

<pre><code>1.redis cache加入(Predis)。
2. ...
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[不轻贱自己]]></title>
    <link href="http://yunweiguya.github.io/blog/2014/07/14/bu-qing-jian-zi-ji/"/>
    <updated>2014-07-14T08:16:22+08:00</updated>
    <id>http://yunweiguya.github.io/blog/2014/07/14/bu-qing-jian-zi-ji</id>
    <content type="html"><![CDATA[<h3>1 恭敬自己</h3>

<p>恭敬众生，也包括恭敬自己。</p>

<p>商业社会既有的评判规则要遵守。应对挑战、挑衅，拿出应有的心量和态度。工作忙，心要闲。</p>

<h3>2 轻装简行</h3>

<p>从2013年中开始，就开始砍掉了阅读、电影、游戏不切实际的部分，到现在，总算找到了自己的爱好。</p>

<p>政治、文化不看了，所有书会处理掉。剩余:【佛经】【经济原理、营销运营】【java、架构】</p>

<p>电影，从600+部中挑出一些范式:</p>

<p>【科幻片】
1. mavel系列中: 钢铁侠ironman、守望者watchmen、复仇者联盟Avengers
2. 蝙蝠侠 深度很够。
3. 黑客帝国 深度更够。
4. 星际迷航
5. 超人钢铁之躯。
6. 辛普森一家 &lt;= 【超爱】。</p>

<p>【西部片】
镖客三部曲。
教父三部曲。</p>

<p>【其它】
人生遥控器、居家男人、火柴人、如果爱、天气预报员、天国王朝、海盗电台、国产凌凌漆、天地英雄。</p>

<p>音乐，【蓝调布鲁斯】，不是乐迷。</p>

<p>游戏全砍了，【骑行、仰卧起坐】，小腹不平何以平天下~</p>

<h3>3 走出去交流</h3>

<p>抓住机会和技术的人聊，营销的人聊。厚积薄发。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sprint回顾]]></title>
    <link href="http://yunweiguya.github.io/blog/2014/07/08/sprinthui-gu/"/>
    <updated>2014-07-08T16:57:32+08:00</updated>
    <id>http://yunweiguya.github.io/blog/2014/07/08/sprinthui-gu</id>
    <content type="html"><![CDATA[<h3>1</h3>

<p>2014年06月24日 ~ 2014年07月04日，3个哥们一起组成兴趣小队折腾了下爬虫平台，算作1个sprint。涉及scrapy、tornado和py一些基础组件redis-py、pika、gearman、apscheduler、dbutils等。业务解决定时爬取、实时爬取、队列消费爬取，比较有意思的是vps服务模块。</p>

<p>兴趣是最好的老师，A君周末搞定py语法，然后研究scrapy，搞vps模块；B君果断扔掉sqlalchemy，写了个orm &lt;= 之前我们用的torndb+dbutils。大家分享、交流很积极充分，难忘的协作经历~。web这块不喜欢twisted(scrapy基于这玩意)，用了tornado &lt;= 后来扫尾玩了下flask，完备很多(当然没有异步io)，但仍感觉web范式不出rails。</p>

<h3>2</h3>

<p>py生态完备，写点后台小脚本挺不错的。现在前台web基本玩php，不写rails了~，不过gevent/eventmachine可以一起玩下。go暂时应该是没有场景用到。</p>

<h3>3</h3>

<p>后面打算写点java，研究netty和dubbo(&lt;= 有了面包、空气和水plan基础理解上应该还好)，应对服务化。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[世界杯]]></title>
    <link href="http://yunweiguya.github.io/blog/2014/06/15/shi-jie-bei/"/>
    <updated>2014-06-15T10:04:02+08:00</updated>
    <id>http://yunweiguya.github.io/blog/2014/06/15/shi-jie-bei</id>
    <content type="html"><![CDATA[<p>世界杯开赛了，弄py的分布式爬虫，番茄钟期间看youku【世界杯集锦】也挺不错:)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[技能树]]></title>
    <link href="http://yunweiguya.github.io/blog/2014/06/05/ji-neng-shu/"/>
    <updated>2014-06-05T08:47:07+08:00</updated>
    <id>http://yunweiguya.github.io/blog/2014/06/05/ji-neng-shu</id>
    <content type="html"><![CDATA[<p>写于2014年03月，发布删改。</p>

<h3>1 现有的技能树</h3>

<ul>
<li>php。</li>
<li>ruby。之前工作写rails应用，学到不少有趣的思想，乐趣所在。</li>
<li>js。曾经很迷这个。</li>
<li>c。最早写过BCM代码(芯片，汇编和c)，然后通信、城轨、空管里都碰了个面(unix系c)。</li>
<li>c++。这东西玩法太深了，写过点mfc、qt，止步于muduo。基于一些考虑，不打算接触了。</li>
</ul>


<h3>2 之前的一些计划</h3>

<ul>
<li>在学java/spring，学习思想，为了写好php。写出让自己满意的php js代码，修炼内功。</li>
<li>好好学下lua，配合php用。</li>
<li>慢慢提升c内功，毕竟php ruby等都是c系的~。认真研究下redis，然后nginx。</li>
<li>一直很想学下backbone.js，看看怎么更好的组织js，不要变成一坨~。</li>
<li>提升对PD的认知。</li>
</ul>


<h3>3 现在的调整</h3>

<ul>
<li>主攻java。 dubbo、metaQ。 任何语言都有适合的地方。</li>
<li>鉴于精力，php java ruby 不玩其他生态了。</li>
<li>swift也许不错。</li>
</ul>


<h3>4 另外一些其它方面的计划</h3>

<ul>
<li>多外出走走，亲近自然，坚持锻炼身体。</li>
<li>考虑村上春树工作法。</li>
<li>练字。</li>
<li>学点经济学。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BigPipe初探]]></title>
    <link href="http://yunweiguya.github.io/blog/2014/06/04/bigpipechu-tan/"/>
    <updated>2014-06-04T22:19:24+08:00</updated>
    <id>http://yunweiguya.github.io/blog/2014/06/04/bigpipechu-tan</id>
    <content type="html"><![CDATA[<p>bigpipe在facebook应用是2010.6的事了，应用场景主要是个人首页，这里是<a href="https://www.facebook.com/notes/facebook-engineering/bigpipe-pipelining-web-pages-for-high-performance/389414033919">链接</a>。
很有意思的是，bigpipe这种行事方式并没有铺广开来，微博的应用在2011年，场景也主要是个人相关页面。主要应该是seo的考虑，bigpipe这种略微激进的SJR(Server-generated JavaScript Responses)方式对seo是毁灭性打击(当然,可以检查是否是Bot,然后分开做)，同样，禁用js同样不能采用bigpipe，只能切回渲染&hellip;</p>

<p>bigpipe可以理解成AJAX模块化方式的性能加强版(当然http请求会减少)，最主要的目的是利用流水线思想降低网页的用户感知延迟。</p>

<p>在php侧做bigpipe这件事情，要并行去组织Pagelets，用多进程(pcntl)可以么? 我们知道现有ZTask 和 ZTaskManager都是跑完拉倒，结果怎么拿回来? 除了中转方式外，好像只能通过IPC. 于是重新翻了下APUE(《UNIX环境高级编程》), Linux 下进程间通信 (IPC) 的方式数很多:pipe、FIFO、POSIX 消息队列、共享内存、信号 (signals)、Sockets;同步原语有互斥器 (mutex)、条件变量 (condition variable)、读写锁 (reader-writer lock)、文件锁 (Record locking)、信号量 (Semaphore) 等等。明显只有Sockets简单靠谱，其他IPC都不能跨机器，而且本机多进程(多线程)是不利于模块化的，如果把pagelet流水线工厂抽出去&hellip;</p>

<p>我们需要的其实只是异步IO +事件回调的机制来生成pagelets,这事java有future, php呢？ 只有yar了&hellip;</p>

<p>咨询了下，某公司现在是用@laruence的yar，据说，pagelet后端并行化坑略多&hellip; 服务器的负载是增加的，整体传输时间不会减。bigepipe最的好处应该是模块化了所有区块。</p>

<p>如果要通过优化把负载降下来，ESI应该有用。</p>

<p>最后，从实现上来说，Bigpipe是一个需要RIA和Server端全力配合的技术。</p>

<p>bigpipe的应用场景、大致方式应该是这样子了，个人感觉场景略少，对已有业务方式侵入还是比较大的。</p>
]]></content>
  </entry>
  
</feed>
